# Getting Started – Auto Spotify (Dorin)

## 1) Python & packages
Use any recent Python 3 (3.10+ recommended). Inside a virtual env, install:

```bash
pip install requests spotipy python-dotenv
```

> Tip: if you don’t have a venv yet:
> ```bash
> python3 -m venv .venv
> source .venv/bin/activate
> ```

---

## 2) Environment variables
Create a **`.env`** file in the project root (it’s ignored by git). Use this template:

```
CLIENT_ID=your_spotify_client_id
CLIENT_SECRET=your_spotify_client_secret
USERNAME=your_spotify_username_or_userid
REDIRECT_URI=https://google.com
```

Notes:
- `CLIENT_ID` / `CLIENT_SECRET` come from your Spotify app (Dashboard → Settings).
- `REDIRECT_URI` must match the value configured in the app settings exactly (e.g., `https://google.com`).
- Keep `.env` private. Commit only `.env.example` if you want to share a template.

---

## 3) Run
From the project root:

```bash
python3 auto_spotify.py
```

What happens on first run:
- The script uses **Authorization Code Flow** for `/v1/me/*`. A browser window may open once to let you log into Spotify and approve scopes. After that, Spotipy caches a token locally (no further prompts until token expires or scopes change).

---

## 4) What the script does (User Stories)

### US1 – Album Tracklists from your recent listening
**Story:** *As a user, I want to see an album’s tracklist with titles and durations so that I can decide which songs to listen to first.*

**How it’s implemented:**
- Reads your **recently played** items with `/v1/me/player/recently-played`.
- Collects the **last 10 distinct album IDs** you actually listened to (keeps your order).
- For each album, calls `/v1/albums/{id}` and `/v1/albums/{id}/tracks`, then prints:
  - Album title, artists, release date
  - Full **ordered tracklist** with durations in `mm:ss`
  - **Total album length**

**Why it’s useful:** you instantly get a clean, human-readable tracklist of the albums you’ve been into lately—handy for planning re-listens, creating playlists, or comparing editions.

---

### US2 – Top tracks of the artist you listened to most recently
**Story:** *As a music fan, I want to fetch an artist’s top tracks so that I quickly get an overview of their most popular songs.*

**How it’s implemented:**
- From your recent plays, finds the **most frequently occurring artist**.
- Fetches that artist’s **Top 10 tracks** using `/v1/artists/{id}/top-tracks?market=<your country>`.
- Prints a ranked list with title, artists, and duration.

**Why it’s useful:** you get a quick “best of” for the artist you’re actively listening to, adapted to your market (country).

---

## 5) Scopes used
The script requests this scope set (needed for recent plays and profile):
```
user-read-private user-read-email user-read-recently-played user-read-currently-playing user-top-read
```

---

## 6) Troubleshooting

- **Browser/auth prompt doesn’t appear / token not cached**
  - Make sure `.env` values are correct and the `REDIRECT_URI` exactly matches your Spotify app settings.
- **`INVALID_CLIENT: Invalid redirect URI`**
  - Fix the redirect URI in both Spotify Dashboard and `.env` to be identical.
- **`insufficient client scope`**
  - You changed scopes; delete Spotipy’s cached token file in the project directory (often `.cache-<USERNAME>`) and run again.
- **Empty “recently played”**
  - Play a couple of tracks in Spotify and rerun—Spotify only returns recent items if you actually listened to something.

---

That’s it—install deps, set `.env`, run the script, and you’ll get:
1) Tracklists for your last 10 unique albums, and  
2) Top tracks for the artist you listened to most.
